xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
fun(input$v1, input$v2)
if(input$v3) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
}
if(input$v4) {
fun(input$v1, input$v2) +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}
})
})
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
fun(input$v1, input$v2)
# if(input$v3) {
#   fun(input$v1, input$v2) +
#     geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
#     geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
# }
# if(input$v4) {
#   fun(input$v1, input$v2) +
#     geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
# }
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
fun(input$v1, input$v2)
if(input$v3) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
}
# if(input$v4) {
#   fun(input$v1, input$v2) +
#     geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
# }
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
if(input$v3) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
} else {
fun(input$v1, input$v2)
}
# if(input$v4) {
#   fun(input$v1, input$v2) +
#     geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
# }
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
if(input$v3) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
} else if(input$v4) {
fun(input$v1, input$v2) +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}  else if(input$v3 & input$v4) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}
else {
fun(input$v1, input$v2)
}
# if(input$v4) {
#   fun(input$v1, input$v2) +
#     geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
# }
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
if(input$v3) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
} else if(input$v4) {
fun(input$v1, input$v2) +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}  else if(input$v3 && input$v4) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}
else {
fun(input$v1, input$v2)
}
# if(input$v4) {
#   fun(input$v1, input$v2) +
#     geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
# }
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
if(input$v3) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
} else if(input$v4) {
fun(input$v1, input$v2) +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}  else if(input$v3 && input$v4) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
}
else {
fun(input$v1, input$v2)
}
# if(input$v4) {
#   fun(input$v1, input$v2) +
#     geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
# }
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(tidyverse)
library(shiny)
library(lattice)
library(ggplot2)
shinyPlot = function(fun, v, lo, hi, step = NULL, label, fps = 4) {
require(shiny)
msecs = 1000/fps
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput('v1', label[1], lo[1], hi[1], v[1], step[1], ticks=FALSE,
animate = animationOptions(msecs)),
sliderInput('v2', label[2], lo[2], hi[2], v[2], step[2], ticks=FALSE,
animate = animationOptions(msecs)),
checkboxInput('v3', label[3], value = FALSE, width = NULL),
checkboxInput('v4', label[4], value = FALSE, width = NULL)),
mainPanel(plotOutput('plot'))
)
),
server = function(input, output, session) {
session$onSessionEnded(function() shiny::stopApp())
output$plot = renderPlot({
if(input$v3) {
if(input$v4) {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
} else {
fun(input$v1, input$v2) +
geom_line(data = data.frame('Q'=c(5+(input$v1+input$v2)/2,5+(input$v1+input$v2)/2),'P'=c(0,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed') +
geom_line(data = data.frame('Q'=c(0,5+(input$v1+input$v2)/2),'P'=c(6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)), aes(x=Q,y=P),linetype='dashed')
}
} else if(input$v4) {
fun(input$v1, input$v2) +
geom_polygon(data=data.frame(x=c(input$v1,0,0,5+(input$v1+input$v2)/2),y=c(11,11,6+(input$v1-input$v2)/2,6+(input$v1-input$v2)/2)),aes(x,y),fill='green',color='black',alpha=0.5)
} else {
fun(input$v1, input$v2)
}
})
}
)
}
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
market.plot = function(v1, v2)
ggplot(market) +
geom_line(data = filter(market, abs(f - v1) < 0.1 & Type=='Demand'), aes(x=Q,y=P)) +
geom_line(data = filter(market, abs(f - v2) < 0.1 & Type=='Supply'), aes(x=Q,y=P)) +
geom_text(data=filter(market, abs(f - v1) < 0.1 & Type=='Demand' & P==1),aes(Q,P,label='Demand Curve'),nudge_y=-0.25) +
geom_text(data=filter(market, abs(f - v2) < 0.1 & Type=='Supply' & P==11),aes(Q,P,label='Supply Curve'),nudge_y=0.25) +
xlim(0,maxn+1) +
ylim(0,12)
shinyPlot(market.plot, c(5, 5), c(1, 1), c(10, 10), c(1, 1),
c('Increase/Decrease Demand','Increase/Decrease Supply','Equilibrium','Consumer Surplus'))
library(rsconnect)
runApp()
runApp()
runApp()
deployApp()
runApp()
deployApp()
getwd()
setwd('/Users/joshfoster/Documents/GitHub/josh-r-foster.github.io/courses/bus-4654/files/session-14/')
getwd()
runApp()
deployApp()
runApp()
maxn = 20
demand.curve = vector()
supply.curve = vector()
for(n in seq(maxn)) {
demand.curve = rbind(demand.curve,data.frame('Q'=c(n,n+10),'P'=c(11,1),'f'=n,'Type'='Demand'))
supply.curve = rbind(supply.curve,data.frame('Q'=c(n+10,n),'P'=c(11,1),'f'=n,'Type'='Supply'))
}
market = rbind(demand.curve,supply.curve)
getwd()
library(shiny)
runApp()
runApp()
deployApp()
library(rsconnect)
deployApp()
